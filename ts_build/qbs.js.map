{"version":3,"file":"qbs.js","sourceRoot":"","sources":["../scrape/qbs.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAEnC,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;AAE/D,mBAAmB,GAAG;IACpB,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACnC,IAAI,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAA;IAChD,MAAM,CAAC;QACL,KAAK,OAAA;QACL,IAAI,MAAA;KACL,CAAC;AACJ,CAAC;AAED,kBAAkB,IAAI;IACpB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACzC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,qBAAqB,IAAI;IACvB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;AACH,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAE1C,OAAO;KACJ,GAAG,CAAC,8DAA8D,CAAC;KACnE,IAAI,CAAC,mCAAmC,CAAC;KACzC,GAAG,CAAC;IACH,MAAM,EAAE,wBAAwB;IAChC,MAAM,EAAE,0BAA0B;IAClC,KAAK,EAAE,qBAAqB;IAC5B,IAAI,EAAE,mBAAmB;IACzB,QAAQ,EAAE,0BAA0B;IACpC,QAAQ,EAAE,0BAA0B;IACpC,OAAO,EAAE,0BAA0B;IACnC,OAAO,EAAE,yBAAyB;IAClC,KAAK,EAAE,0BAA0B;CAClC,CAAC;KACD,IAAI,CAAC,UAAC,QAAQ;IAOb,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxB,CAAC,CAAC;KACD,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC;KAChB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;KAClB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC","sourcesContent":["let osmosis = require('osmosis');\nvar path = require('path');\nvar loopback = require('loopback');\n\nvar app = require(path.resolve(__dirname, '../server/server'));\n\nfunction parseName(str) {\n  let index = str.indexOf(',');\n  let last = str.substring(0, index);\n  let first = str.substring(index + 1, str.length)\n  return {\n    first,\n    last\n  };\n}\n\nfunction parseWeb(json) {\n  let player = {};\n  let name = parseName(json.name);\n  player.first_name = name.first;\n  player.last_name = name.last;\n  player.position = json.pos.toUpperCase();\n  player.teamId = json.team.toUpperCase();\n  return player;\n}\n\nfunction parsePlayer(json) {\n  if (json.pos.toUpperCase() === 'QB') {\n    return parseWeb(json);\n  }\n}\n\nconsole.log('what the hell is going on?');\n\nosmosis\n  .get('http://www.pro-football-reference.com/years/2016/passing.htm')\n  .find('#passing > tbody > tr:not(.thead)')\n  .set({\n    'name': 'td:nth-child(2) > @csk',\n    'team': 'td[data-stat=\"team\"] > a',\n    'pos': 'td[data-stat=\"pos\"]',\n    'gp': 'td[data-stat=\"g\"]',\n    'ps_cmp': 'td[data-stat=\"pass_cmp\"]',\n    'ps_att': 'td[data-stat=\"pass_att\"]',\n    'ps_yd': 'td[data-stat=\"pass_yds\"]',\n    'ps_td': 'td[data-stat=\"pass_td\"]',\n    \"int\": 'td[data-stat=\"pass_int\"]'\n  })\n  .data((response) => {\n    // let player = parsePlayer(response);\n    // if (player != null) {\n    //   app.models.Player.create(player, (insertResponse) => {\n    //     console.log(insertResponse);\n    //   });\n    // }\n    console.log(response);\n  })\n  .log(console.log)\n  .error(console.log)\n  .debug(console.log);\n"]}